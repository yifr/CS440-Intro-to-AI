9/24/19

Intro to AI:

I. Variants on Hill Climbing Algorithms:

    1) Stochastic Hill Climbing:
        a. Randomly pick best move
        b. Slower to converge

    2) First Choice Hill climbing
        a. Randomly generate successor states and pick the best
        b. Applies to scenarios with high dimensionality (ie; lots of successor states) 

II. Simulated Annealing
    - Annealing is a way of cooling hot metal slowly to achieve desired properties
    - Simulated annealing is similar to hill climbing but it allows "bad moves" with small probability

SA Pseudocode:

Function simulated-annealing(problem, schedule) returns a solution state
    inputs: problem, a problem
            schedule, a mapping from time to "temperature"

    current <- make_node(problem.initial_state):
        for t = 1 to infinity:
            T = schedule(T)
            if T = 0 return current
            next - randomly selected successor of current 
            delta_E = next.value - current.value
            "
            "See notes for rest
            "

     - Intuitively, SA "shakes" the current state
            - the higher the temperature T, the more "vibration"
            - can handle very difficult case with many local optima
            - Used widely in in applications like: VLSI, factory scheduling, structural optimization


III. Local Beam Search
    a. similar to k hill-climbing together
    b. difference is the k states are pooled together
    c. States w/ good successors dominate search process
   

IV. Genetic Algorithms
    A. Very effective
        1. Similar to local beam search
            a. start with population of individuals,
            b. you apply a fitness function, and use crossover and mutation to reach a high level of satisfaction 


    B. ie; 8-Queens
        1. individual = state, 8 x log(2)8 = 24 bits
        2. fitness = number of pairs of queens not attacking (higher = better)
        3. crossover = slice pairs in the middle and mix them together (ie; 32752411 + 24748552 --> 32748552 + 24752411)
        4. In mutation you randomly flip some bits to change up numbers 




